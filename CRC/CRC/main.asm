; CRC.asm
; Created: 02.03.2020 20:00:13

; Replace with your application code
;############################################
;###									  ###
;###	Программма нахождения контрольной ###
;### суммы CRC							  ###
;###									  ###
;############################################
; RAMEND - константа, которая обозначает самый верхний адрес ОЗУ
; DDRx - регистр порта, который определяет его работу(0 - вход, 1 - выход)
; PORTx - регистр порта, который хранит его значение(1 - сигнал высокого уровня, 0 - низкого)
; PINx - чтение логическитх уровней разрядов порта x



;------------ Команды управления

.include "m644def.inc"								; подключение файла описания регистров. без него программа работать не будет
.list												; включение листинга
.cseg												; выбор сегмента програмного кода
.def	Msg_frstBite = r17							; хранит первый байт сообщения
.def	Msg_scndBite = r16							; хранит второй байт сообщения


.def	temp = r23									; временный регистр для управления портами ввода
;------------------- регистры для расчета crc
.def	pol_frst = r21								; полином модбас (старший байт)
.def	pol_scnd = r22								; полином модбас (младший байт)
.def	counter = r20								; счетчик цикла
.def	msg = r24									; для хранения очередного байта сообщения


;------------------- инициализация порта на выход
ldi		temp, 0xFF
out		DDRB, temp 
out		DDRC, temp
						
;------------------- заполнение crc единицами (XL - старший байт и XH - младший)
ldi		XL, 0xFF							
ldi		XH, 0xFF	
							
;------------------- полином модбаса
ldi		pol_frst, 0xA0
ldi		pol_scnd, 0x01

;------------------- сообщение
ldi		Msg_frstBite, 0x10					
ldi		Msg_scndBite, 0x10	

;------------ Начало тела программы

; на вход 0x1010 или 0b1000000010000. на выход 0xBC0D или 0b1011110000001101 (для проверки)
main:

	mov		msg, Msg_frstBite
	call	crc_calculation
	mov		msg, Msg_scndBite
	call	crc_calculation
	out		DDRB, xl
	out		DDRC, xh

	nop
	nop
	nop


	
;------------------- Функция для расчета crc
;			Используемые регистры:
; * msg - хранит 8 бит сообщения для обработки
; * сounter - счетчик для цикла
; * регистры хранения полинома для расчета crc
;		pol_frst - первый байт полинома протокола Модбас
;		pol_scnd - второй байт полинома протокола Модбас
; * регистры для хранения самого crc
;		xl - старший байт 
;		xh - младший байт
crc_calculation:
		eor		xh, msg							; исключающее или с 8 битами сообщения

	;------------------- цикл, с выполнением сдвига 1 бита вправо (если бит равен 1 - XOR с A001; инчае снова сдвиг вправо)
		ldi		counter, 0x00

	crcl_1:
	;------------------- счетчик цикла(опeранды после счетчика выполнятся 8 раз)
		inc		counter
		cpi		counter, 9
		breq	end_crc_calculation						; перейти, если равно
	;------------------- 
		lsr		XL										; сдивг на один бит вправо результата c сохранением младшего бита в флаге переноса
		ror		xh										; сдвиг вправо, крайний левый бит заполнится значением из флага переноса
		brcc	crcl_1									; если сдвигаемый бит = 0, повторяем 

	;-------------------  исключающее ИЛИ содержимого регистра со значением A001h
		eor		XL, pol_frst
		eor		xh, pol_scnd
		jmp		crcl_1
	end_crc_calculation:
ret





;------------------- все, что связано с uart и usart

		; за прием данных в USART (RxD) отвечает ножка PDO
		; за передачу данных из USART (TxD) отвечает ножка PD1
		; если будет использоваться линия синхронизации, то данную функцию несет ножка XCK

;------------------- Для управлением работы с USART используются следующие регистры:

		; UCSRA — содержит в основном флаги состояния приема/передачи данных.
		; UCSRB — определяет какие прерывания генерировать при наступление событий, разрешает/запрещает передачу/прием, 
		;			совместно с регистром UCSRC определяет разрядность передаваемого/принимаемого слова.
		; UCSRC — задает режим работы синхронный/асинхронный, 
		;			определяет правила работы контроля данных — проверка на четность/не честность или отключено, 
		;			количество стоп битов, совместно с регистром UCSRB определяет разрядность передаваемого/принимаемого слова, 
		;			определяет по какому фронту принимать/передавать данные — по спадающему или по нарастающему.
		; UBRR — определяет скорость приема/передачи данных



	
; Internal Hardware Init  ======================================
		.equ 	XTAL = 8000000 	
		.equ 	baudrate = 9600  
		.equ 	bauddivider = XTAL/(16*baudrate)-1
 
 
uart_init:	LDI 	R16, low(bauddivider)
		out 	UBRRL, R16
		LDI 	R16, high(bauddivider)
		OUT 	UBRRH,R16
 
		LDI 	R16,0
		OUT 	UCSRA, R16
 
; Прерывания запрещены, прием-передача разрешен.
		LDI 	R16, (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<TXCIE)|(0<<UDRIE)
		OUT 	UCSRB, R16	
 
; Формат кадра - 8 бит, пишем в регистр UCSRC, за это отвечает бит селектор
		LDI 	R16, (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)
		OUT 	UCSRC, R16