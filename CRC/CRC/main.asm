; CRC.asm
; Created: 02.03.2020 20:00:13

; Replace with your application code
;############################################
;###	Программма нахождения контрольной ###
;### суммы CRC							  ###
;############################################
;RAMEND - константа, которая обозначает самый верхний адрес ОЗУ
; DDRx - регистр порта, который определяет его работу(0 - вход, 1 - выход)
; PORTx - регистр порта, который хранит его значение(1 - сигнал высокого уровня, 0 - низкого)
; PINx - чтение логическитх уровней разрядов порта x



;------------ Команды управления

.include "m644def.inc"								; подключение файла описания регистров. без него программа работать не будет
.list												; включение листинга
.cseg												; выбор сегмента програмного кода
.def	Msg_frstBit = r17							; хранит первый байт сообщения
.def	Msg_scndBit = r16							; хранит второй байт сообщения
.def	crc_frst = r18
.def	crc_scnd = r19
.def	counter = r20
.def	pol_frst = r21
.def	pol_scnd = r22
.def	temp = r23

;------------------- инициализация порта на выход
ldi		temp,0xFF
out		DDRB, temp 
out		DDRC, temp


;------------ Начало тела программы

; на вход 0x1010 или 0b1000000010000. на выход 0xBC0D или 0b1011110000001101
main:
;------------------- сообщение
	ldi		Msg_frstBit, 0xAA						
	ldi		Msg_scndBit, 0xAB						
;------------------- заполнение crc единицами (XL и XH хранят crc)
	ldi		XL, 0xFF							
	ldi		XH, 0xFF							
;------------------- полином модбаса
	ldi		pol_frst, 0xA0
	ldi		pol_scnd, 0x01

	eor		xl, Msg_frstBit							; исключающее или с первыми 8 битами сообщения

;------------------- цикл, с выполнением сдвига 1 бита вправо (если бит равен 1 - XOR с A001; инчае снова сдвиг вправо)
	ldi		counter, 0x00

crcl_1:
;------------------- счетчик цикла(опранды после счетчика выполняться 8 раз)
	inc		counter
	cpi		counter, 9
	breq	out_crc									; перейти, если равно
;------------------- 
	lsr		XL										; сдивг на один бит вправо результата c сохрангением младшего бита в флаге переноса
	ror		xh										; сдвиг вправо, крайний левый бит заполнится значением из флага переноса
	brcc	crcl_1									; если сдвигаемый бит = 0, повторяем 

;-------------------  исключающее ИЛИ содержимого регистра со значением A001h
	eor		XL, pol_frst
	eor		xh, pol_scnd
	jmp		crcl_1

out_crc:
	eor		xh, Msg_scndBit
	ldi		counter, 0x00

crcl_2:
;------------------- счетчик цикла(опранды после счетчика выполняться 8 раз)
	inc		counter
	cpi		counter, 9
	breq	last									; перейти, если равно
;------------------- 
	lsr		XL										; сдивг на один бит вправо, крайний левый бит заполнится нулем
	ror		xh										; сдвиг вправо, крайний левый бит заполнится значением из флага переноса
	brcc	crcl_2									; если сдвигаемый бит = 0, повторяем 

;-------------------  исключающее ИЛИ содержимого регистра со значением A001h
	eor		XL, pol_frst
	eor		xh, pol_scnd
	jmp		crcl_2

last:
	out		DDRB, xl
	out		DDRC, xh


	nop
	nop
	nop
	

	











